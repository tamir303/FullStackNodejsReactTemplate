openapi: 3.0.0
info:
  title: My API Documentation
  version: 1.0.0
  description: API documentation for my Node.js project
servers:
  - url: "http://localhost:4000"
    description: Development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                required:
                  - userId
        '400':
          description: Bad request (validation errors)
        '500':
          description: Internal server error

  /auth/login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "your_jwt_token_here"
        '400':
          description: Bad request (invalid credentials)
        '401':
          description: Unauthorized (incorrect credentials)
        '500':
          description: Internal server error

# Todos Section
  /todo/create:
    post:
      summary: Create a new todo item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '201':
          description: Todo item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '400':
          description: Bad request (validation errors)
        '500':
          description: Internal server error

  /todo/edit:
    post:
      summary: Edit an existing todo item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: Todo item edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '400':
          description: Bad request (validation errors)
        '500':
          description: Internal server error

  /todo/delete:
    post:
      summary: Delete a todo item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoDeleteRequest'
      responses:
        '200':
          description: Todo item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Deleted Todo {title}"
        '400':
          description: Bad request (validation errors)
        '500':
          description: Internal server error

  /todo/getAll:
    post:
      summary: Get all todo items for the current user
      responses:
        '200':
          description: List of all todo items for the current user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'
        '400':
          description: Bad request
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    Todo:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title

    TodoResponse:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        complete:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - title
        - description
        - complete

    TodoDeleteRequest:
      type: object
      properties:
        title:
          type: string
      required:
        - title
